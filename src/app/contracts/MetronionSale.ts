/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SaleConfigStruct = {
  privateTime: BigNumberish;
  publicTime: BigNumberish;
  endTime: BigNumberish;
};

export type SaleConfigStructOutput = [BigNumber, BigNumber, BigNumber] & {
  privateTime: BigNumber;
  publicTime: BigNumber;
  endTime: BigNumber;
};

export type SaleRecordStruct = {
  totalSold: BigNumberish;
  privateSold: BigNumberish;
  publicSold: BigNumberish;
  ownerBought: BigNumberish;
};

export type SaleRecordStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalSold: BigNumber;
  privateSold: BigNumber;
  publicSold: BigNumber;
  ownerBought: BigNumber;
};

export type UserRecordStruct = {
  privateBought: BigNumberish;
  publicBought: BigNumberish;
};

export type UserRecordStructOutput = [BigNumber, BigNumber] & {
  privateBought: BigNumber;
  publicBought: BigNumber;
};

export interface MetronionSaleInterface extends utils.Interface {
  functions: {
    "CAP_OWNER_INITIAL_MINT()": FunctionFragment;
    "CAP_PER_ADDRESS()": FunctionFragment;
    "CAP_PER_PRIVATE_ADDRESS()": FunctionFragment;
    "SALE_PRICE()": FunctionFragment;
    "buy(uint64)": FunctionFragment;
    "countWhitelistedGroup()": FunctionFragment;
    "getSaleConfig()": FunctionFragment;
    "getSaleRecord()": FunctionFragment;
    "getUserRecord(address)": FunctionFragment;
    "getWhitelistedGroup()": FunctionFragment;
    "isWhitelistedAddress(address)": FunctionFragment;
    "maxWhitelistSize()": FunctionFragment;
    "nftContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateWhitelistedGroup(address[],bool)": FunctionFragment;
    "versionId()": FunctionFragment;
    "withdrawETH(address,uint256)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CAP_OWNER_INITIAL_MINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAP_PER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAP_PER_PRIVATE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SALE_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "countWhitelistedGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleRecord",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWhitelistSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistedGroup",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "versionId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CAP_OWNER_INITIAL_MINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAP_PER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAP_PER_PRIVATE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SALE_PRICE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countWhitelistedGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWhitelistSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistedGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnerBought(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrivateBought(address,uint256,uint256)": EventFragment;
    "PublicBought(address,uint256,uint256)": EventFragment;
    "ReceiveETH(address,uint256)": EventFragment;
    "UpdateWhitelistedAddress(address,bool)": EventFragment;
    "WithdrawETH(address,uint256)": EventFragment;
    "WithdrawToken(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrivateBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWhitelistedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToken"): EventFragment;
}

export type OwnerBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; versionId: BigNumber; totalWeiPaid: BigNumber }
>;

export type OwnerBoughtEventFilter = TypedEventFilter<OwnerBoughtEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PrivateBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; versionId: BigNumber; totalWeiPaid: BigNumber }
>;

export type PrivateBoughtEventFilter = TypedEventFilter<PrivateBoughtEvent>;

export type PublicBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; versionId: BigNumber; totalWeiPaid: BigNumber }
>;

export type PublicBoughtEventFilter = TypedEventFilter<PublicBoughtEvent>;

export type ReceiveETHEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type ReceiveETHEventFilter = TypedEventFilter<ReceiveETHEvent>;

export type UpdateWhitelistedAddressEvent = TypedEvent<
  [string, boolean],
  { account: string; isWhitelisted: boolean }
>;

export type UpdateWhitelistedAddressEventFilter =
  TypedEventFilter<UpdateWhitelistedAddressEvent>;

export type WithdrawETHEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type WithdrawETHEventFilter = TypedEventFilter<WithdrawETHEvent>;

export type WithdrawTokenEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type WithdrawTokenEventFilter = TypedEventFilter<WithdrawTokenEvent>;

export interface MetronionSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetronionSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAP_OWNER_INITIAL_MINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAP_PER_PRIVATE_ADDRESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SALE_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countWhitelistedGroup(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSaleConfig(overrides?: CallOverrides): Promise<[SaleConfigStructOutput]>;

    getSaleRecord(overrides?: CallOverrides): Promise<[SaleRecordStructOutput]>;

    getUserRecord(
      account: string,
      overrides?: CallOverrides
    ): Promise<[UserRecordStructOutput]>;

    getWhitelistedGroup(overrides?: CallOverrides): Promise<[string[]]>;

    isWhitelistedAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxWhitelistSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhitelistedGroup(
      accounts: string[],
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    versionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawETH(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CAP_OWNER_INITIAL_MINT(overrides?: CallOverrides): Promise<BigNumber>;

  CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

  CAP_PER_PRIVATE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

  SALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countWhitelistedGroup(overrides?: CallOverrides): Promise<BigNumber>;

  getSaleConfig(overrides?: CallOverrides): Promise<SaleConfigStructOutput>;

  getSaleRecord(overrides?: CallOverrides): Promise<SaleRecordStructOutput>;

  getUserRecord(
    account: string,
    overrides?: CallOverrides
  ): Promise<UserRecordStructOutput>;

  getWhitelistedGroup(overrides?: CallOverrides): Promise<string[]>;

  isWhitelistedAddress(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxWhitelistSize(overrides?: CallOverrides): Promise<BigNumber>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhitelistedGroup(
    accounts: string[],
    isWhitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  versionId(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawETH(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAP_OWNER_INITIAL_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    CAP_PER_PRIVATE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    buy(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    countWhitelistedGroup(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleConfig(overrides?: CallOverrides): Promise<SaleConfigStructOutput>;

    getSaleRecord(overrides?: CallOverrides): Promise<SaleRecordStructOutput>;

    getUserRecord(
      account: string,
      overrides?: CallOverrides
    ): Promise<UserRecordStructOutput>;

    getWhitelistedGroup(overrides?: CallOverrides): Promise<string[]>;

    isWhitelistedAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxWhitelistSize(overrides?: CallOverrides): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelistedGroup(
      accounts: string[],
      isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    versionId(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerBought(address,uint256,uint256)"(
      buyer?: string | null,
      versionId?: null,
      totalWeiPaid?: null
    ): OwnerBoughtEventFilter;
    OwnerBought(
      buyer?: string | null,
      versionId?: null,
      totalWeiPaid?: null
    ): OwnerBoughtEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PrivateBought(address,uint256,uint256)"(
      buyer?: string | null,
      versionId?: null,
      totalWeiPaid?: null
    ): PrivateBoughtEventFilter;
    PrivateBought(
      buyer?: string | null,
      versionId?: null,
      totalWeiPaid?: null
    ): PrivateBoughtEventFilter;

    "PublicBought(address,uint256,uint256)"(
      buyer?: string | null,
      versionId?: null,
      totalWeiPaid?: null
    ): PublicBoughtEventFilter;
    PublicBought(
      buyer?: string | null,
      versionId?: null,
      totalWeiPaid?: null
    ): PublicBoughtEventFilter;

    "ReceiveETH(address,uint256)"(
      from?: null,
      amount?: null
    ): ReceiveETHEventFilter;
    ReceiveETH(from?: null, amount?: null): ReceiveETHEventFilter;

    "UpdateWhitelistedAddress(address,bool)"(
      account?: null,
      isWhitelisted?: null
    ): UpdateWhitelistedAddressEventFilter;
    UpdateWhitelistedAddress(
      account?: null,
      isWhitelisted?: null
    ): UpdateWhitelistedAddressEventFilter;

    "WithdrawETH(address,uint256)"(
      recipient?: null,
      amount?: null
    ): WithdrawETHEventFilter;
    WithdrawETH(recipient?: null, amount?: null): WithdrawETHEventFilter;

    "WithdrawToken(address,address,uint256)"(
      token?: null,
      recipient?: null,
      amount?: null
    ): WithdrawTokenEventFilter;
    WithdrawToken(
      token?: null,
      recipient?: null,
      amount?: null
    ): WithdrawTokenEventFilter;
  };

  estimateGas: {
    CAP_OWNER_INITIAL_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    CAP_PER_PRIVATE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countWhitelistedGroup(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleRecord(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRecord(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedGroup(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistedAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWhitelistSize(overrides?: CallOverrides): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhitelistedGroup(
      accounts: string[],
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    versionId(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAP_OWNER_INITIAL_MINT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAP_PER_PRIVATE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SALE_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countWhitelistedGroup(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleRecord(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRecord(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedGroup(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWhitelistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhitelistedGroup(
      accounts: string[],
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    versionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETH(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
